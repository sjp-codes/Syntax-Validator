
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA EQUAL ID LBRACE LBRACKET LPAREN NUMBER RBRACE RBRACKET RPAREN STRINGstatement : ID EQUAL expression\n                 | expressionexpression : LBRACKET list_values RBRACKET\n                  | LPAREN tuple_values RPAREN\n                  | LBRACE dict_items RBRACE\n                  | NUMBER\n                  | STRINGlist_values : expression\n                   | list_values COMMA expressiontuple_values : expression\n                    | tuple_values COMMA expressiondict_items : dict_item\n                  | dict_items COMMA dict_itemdict_item : STRING COLON expression\n                 | NUMBER COLON expression'
    
_lr_action_items = {'ID':([0,],[2,]),'LBRACKET':([0,4,5,9,20,22,25,26,],[4,4,4,4,4,4,4,4,]),'LPAREN':([0,4,5,9,20,22,25,26,],[5,5,5,5,5,5,5,5,]),'LBRACE':([0,4,5,9,20,22,25,26,],[6,6,6,6,6,6,6,6,]),'NUMBER':([0,4,5,6,9,20,22,24,25,26,],[7,7,7,17,7,7,7,17,7,7,]),'STRING':([0,4,5,6,9,20,22,24,25,26,],[8,8,8,16,8,8,8,16,8,8,]),'$end':([1,3,7,8,18,19,21,23,],[0,-2,-6,-7,-1,-3,-4,-5,]),'EQUAL':([2,],[9,]),'RBRACKET':([7,8,10,11,19,21,23,27,],[-6,-7,19,-8,-3,-4,-5,-9,]),'COMMA':([7,8,10,11,12,13,14,15,19,21,23,27,28,29,30,31,],[-6,-7,20,-8,22,-10,24,-12,-3,-4,-5,-9,-11,-13,-14,-15,]),'RPAREN':([7,8,12,13,19,21,23,28,],[-6,-7,21,-10,-3,-4,-5,-11,]),'RBRACE':([7,8,14,15,19,21,23,29,30,31,],[-6,-7,23,-12,-3,-4,-5,-13,-14,-15,]),'COLON':([16,17,],[25,26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,4,5,9,20,22,25,26,],[3,11,13,18,27,28,30,31,]),'list_values':([4,],[10,]),'tuple_values':([5,],[12,]),'dict_items':([6,],[14,]),'dict_item':([6,24,],[15,29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> ID EQUAL expression','statement',3,'p_collection_declaration','collection_dec_lex_yacc.py',49),
  ('statement -> expression','statement',1,'p_collection_declaration','collection_dec_lex_yacc.py',50),
  ('expression -> LBRACKET list_values RBRACKET','expression',3,'p_expression_type','collection_dec_lex_yacc.py',54),
  ('expression -> LPAREN tuple_values RPAREN','expression',3,'p_expression_type','collection_dec_lex_yacc.py',55),
  ('expression -> LBRACE dict_items RBRACE','expression',3,'p_expression_type','collection_dec_lex_yacc.py',56),
  ('expression -> NUMBER','expression',1,'p_expression_type','collection_dec_lex_yacc.py',57),
  ('expression -> STRING','expression',1,'p_expression_type','collection_dec_lex_yacc.py',58),
  ('list_values -> expression','list_values',1,'p_list_values_dec','collection_dec_lex_yacc.py',65),
  ('list_values -> list_values COMMA expression','list_values',3,'p_list_values_dec','collection_dec_lex_yacc.py',66),
  ('tuple_values -> expression','tuple_values',1,'p_tuple_values_dec','collection_dec_lex_yacc.py',73),
  ('tuple_values -> tuple_values COMMA expression','tuple_values',3,'p_tuple_values_dec','collection_dec_lex_yacc.py',74),
  ('dict_items -> dict_item','dict_items',1,'p_dict_items_dec','collection_dec_lex_yacc.py',81),
  ('dict_items -> dict_items COMMA dict_item','dict_items',3,'p_dict_items_dec','collection_dec_lex_yacc.py',82),
  ('dict_item -> STRING COLON expression','dict_item',3,'p_dict_item','collection_dec_lex_yacc.py',89),
  ('dict_item -> NUMBER COLON expression','dict_item',3,'p_dict_item','collection_dec_lex_yacc.py',90),
]
